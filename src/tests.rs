mod w8_4_12 {
    use crate::{rc5_w8, Key, Rc5};

    fn make_rc5() -> impl Rc5 {
        let key = vec![0x00, 0x01, 0x02, 0x03];
        rc5_w8(Key::try_from(key.as_ref()).unwrap(), 12).unwrap()
    }

    #[test]
    fn encode_a() {
        let pt = vec![
            0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        ];
        let ct = vec![
            0x21, 0x2A, 0x21, 0x2A, 0x21, 0x2A, 0x21, 0x2A, 0x21, 0x2A, 0x21, 0x2A, 0x21, 0x2A,
        ];

        let res = make_rc5().encode(&pt).unwrap();

        assert!(&ct[..] == &res[..]);
    }

    #[test]
    fn decode_a() {
        let pt = vec![0x00, 0x01];
        let ct = vec![0x21, 0x2A];

        let res = make_rc5().decode(&ct).unwrap();

        assert!(&pt[..] == &res[..]);
    }
}

mod w16_8_16 {
    use crate::{rc5_w16, Key, Rc5};

    fn make_rc5() -> impl Rc5 {
        let key = vec![0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07];
        rc5_w16(Key::try_from(key.as_ref()).unwrap(), 16).unwrap()
    }

    #[test]
    fn encode_a() {
        let pt = vec![0x00, 0x01, 0x02, 0x03];
        let ct = vec![0x23, 0xA8, 0xD7, 0x2E];

        let res = make_rc5().encode(&pt).unwrap();

        assert!(&ct[..] == &res[..]);
    }

    #[test]
    fn decode_a() {
        let pt = vec![0x00, 0x01, 0x02, 0x03];
        let ct = vec![0x23, 0xA8, 0xD7, 0x2E];

        let res = make_rc5().decode(&ct).unwrap();

        assert!(&pt[..] == &res[..]);
    }
}

mod w32_16_12 {
    use crate::{rc5_w32, Key, Rc5};

    fn make_rc5(key: &[u8]) -> impl Rc5 {
        rc5_w32(Key::try_from(key.as_ref()).unwrap(), 12).unwrap()
    }

    #[test]
    fn encode_a() {
        let key = vec![
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            0x0E, 0x0F,
        ];
        let pt = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77];
        let ct = vec![0x2D, 0xDC, 0x14, 0x9B, 0xCF, 0x08, 0x8B, 0x9E];

        let res = make_rc5(key.as_ref()).encode(&pt).unwrap();

        assert!(&ct[..] == &res[..]);
    }

    #[test]
    fn encode_b() {
        let key = vec![
            0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81,
            0xFF, 0x48,
        ];
        let pt = vec![0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84];
        let ct = vec![0x11, 0xE4, 0x3B, 0x86, 0xD2, 0x31, 0xEA, 0x64];

        let res = make_rc5(key.as_ref()).encode(&pt).unwrap();

        assert!(&ct[..] == &res[..]);
    }

    #[test]
    fn decode_a() {
        let key = vec![
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            0x0E, 0x0F,
        ];
        let pt = vec![0x96, 0x95, 0x0D, 0xDA, 0x65, 0x4A, 0x3D, 0x62];
        let ct = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77];

        let res = make_rc5(key.as_ref()).decode(&ct).unwrap();

        assert!(&pt[..] == &res[..]);
    }

    #[test]
    fn decode_b() {
        let key = vec![
            0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81,
            0xFF, 0x48,
        ];
        let pt = vec![0x63, 0x8B, 0x3A, 0x5E, 0xF7, 0x2B, 0x66, 0x3F];
        let ct = vec![0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84];

        let res = make_rc5(key.as_ref()).decode(&ct).unwrap();

        assert!(&pt[..] == &res[..]);
    }
}

mod w64_24_24 {
    use crate::{rc5_w64, Key, Rc5};

    fn make_rc5() -> impl Rc5 {
        let key = vec![
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        ];
        rc5_w64(Key::try_from(key.as_ref()).unwrap(), 24).unwrap()
    }

    #[test]
    fn encode_a() {
        let pt = vec![
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            0x0E, 0x0F,
        ];
        let ct = vec![
            0xA4, 0x67, 0x72, 0x82, 0x0E, 0xDB, 0xCE, 0x02, 0x35, 0xAB, 0xEA, 0x32, 0xAE, 0x71,
            0x78, 0xDA,
        ];

        let res = make_rc5().encode(&pt).unwrap();

        assert!(&ct[..] == &res[..]);
    }

    #[test]
    fn decode_a() {
        let pt = vec![
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            0x0E, 0x0F,
        ];
        let ct = vec![
            0xA4, 0x67, 0x72, 0x82, 0x0E, 0xDB, 0xCE, 0x02, 0x35, 0xAB, 0xEA, 0x32, 0xAE, 0x71,
            0x78, 0xDA,
        ];

        let res = make_rc5().decode(&ct).unwrap();

        assert!(&pt[..] == &res[..]);
    }
}

mod general {
    use crate::{rc5_w32, Key, Rc5, Rc5Error};

    fn make_rc5(key: &[u8]) -> impl Rc5 {
        rc5_w32(Key::try_from(key.as_ref()).unwrap(), 12).unwrap()
    }

    #[test]
    fn invalid_bytes_input() {
        let key = vec![
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            0x0E, 0x0F,
        ];
        let pt = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66];

        assert!(matches!(
            make_rc5(key.as_ref()).encode(&pt),
            Err(Rc5Error::WordError(_))
        ));
    }

    #[test]
    fn multiple_usage() {
        let key = vec![
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            0x0E, 0x0F,
        ];

        let pt = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77];
        let ct = vec![0x2D, 0xDC, 0x14, 0x9B, 0xCF, 0x08, 0x8B, 0x9E];

        let rc5 = make_rc5(key.as_ref());

        let res = rc5.encode(&pt).unwrap();

        assert!(&ct[..] == &res[..]);

        let res = rc5.decode(&ct).unwrap();

        assert!(&pt[..] == &res[..]);
    }
}
