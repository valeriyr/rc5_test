use rc5_test::{rc5_w64, Key, Rc5};

fn make_rc5() -> impl Rc5 {
    let key = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    ];
    rc5_w64(Key::try_from(key.as_ref()).unwrap(), 24).unwrap()
}

#[test]
fn encode_a() {
    let pt = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    let ct = vec![
        0xA4, 0x67, 0x72, 0x82, 0x0E, 0xDB, 0xCE, 0x02, 0x35, 0xAB, 0xEA, 0x32, 0xAE, 0x71, 0x78,
        0xDA,
    ];

    let res = make_rc5().encode(&pt).unwrap();

    assert_eq!(&ct[..], &res[..]);
}

#[test]
fn decode_a() {
    let pt = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    let ct = vec![
        0xA4, 0x67, 0x72, 0x82, 0x0E, 0xDB, 0xCE, 0x02, 0x35, 0xAB, 0xEA, 0x32, 0xAE, 0x71, 0x78,
        0xDA,
    ];

    let res = make_rc5().decode(&ct).unwrap();

    assert_eq!(&pt[..], &res[..]);
}
